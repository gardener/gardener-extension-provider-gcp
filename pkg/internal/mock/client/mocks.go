// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-gcp/pkg/internal/client (interfaces: Interface,FirewallsService,RoutesService,InstancesService,DisksService,RegionsService,FirewallsListCall,FirewallsGetCall,FirewallsInsertCall,FirewallsPatchCall,FirewallsDeleteCall,RoutesDeleteCall,RoutesListCall,InstancesGetCall,InstancesDeleteCall,InstancesInsertCall,DisksInsertCall,DisksGetCall,DisksDeleteCall,RegionsGetCall)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	client "github.com/gardener/gardener-extension-provider-gcp/pkg/internal/client"
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
	googleapi "google.golang.org/api/googleapi"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Disks mocks base method.
func (m *MockInterface) Disks() client.DisksService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disks")
	ret0, _ := ret[0].(client.DisksService)
	return ret0
}

// Disks indicates an expected call of Disks.
func (mr *MockInterfaceMockRecorder) Disks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disks", reflect.TypeOf((*MockInterface)(nil).Disks))
}

// Firewalls mocks base method.
func (m *MockInterface) Firewalls() client.FirewallsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Firewalls")
	ret0, _ := ret[0].(client.FirewallsService)
	return ret0
}

// Firewalls indicates an expected call of Firewalls.
func (mr *MockInterfaceMockRecorder) Firewalls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Firewalls", reflect.TypeOf((*MockInterface)(nil).Firewalls))
}

// Instances mocks base method.
func (m *MockInterface) Instances() client.InstancesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances")
	ret0, _ := ret[0].(client.InstancesService)
	return ret0
}

// Instances indicates an expected call of Instances.
func (mr *MockInterfaceMockRecorder) Instances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockInterface)(nil).Instances))
}

// Regions mocks base method.
func (m *MockInterface) Regions() client.RegionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Regions")
	ret0, _ := ret[0].(client.RegionsService)
	return ret0
}

// Regions indicates an expected call of Regions.
func (mr *MockInterfaceMockRecorder) Regions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Regions", reflect.TypeOf((*MockInterface)(nil).Regions))
}

// Routes mocks base method.
func (m *MockInterface) Routes() client.RoutesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(client.RoutesService)
	return ret0
}

// Routes indicates an expected call of Routes.
func (mr *MockInterfaceMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockInterface)(nil).Routes))
}

// MockFirewallsService is a mock of FirewallsService interface.
type MockFirewallsService struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsServiceMockRecorder
}

// MockFirewallsServiceMockRecorder is the mock recorder for MockFirewallsService.
type MockFirewallsServiceMockRecorder struct {
	mock *MockFirewallsService
}

// NewMockFirewallsService creates a new mock instance.
func NewMockFirewallsService(ctrl *gomock.Controller) *MockFirewallsService {
	mock := &MockFirewallsService{ctrl: ctrl}
	mock.recorder = &MockFirewallsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsService) EXPECT() *MockFirewallsServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFirewallsService) Delete(arg0, arg1 string) client.FirewallsDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(client.FirewallsDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFirewallsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallsService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockFirewallsService) Get(arg0, arg1 string) client.FirewallsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(client.FirewallsGetCall)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockFirewallsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallsService)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockFirewallsService) Insert(arg0 string, arg1 *v1.Firewall) client.FirewallsInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(client.FirewallsInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFirewallsServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFirewallsService)(nil).Insert), arg0, arg1)
}

// List mocks base method.
func (m *MockFirewallsService) List(arg0 string) client.FirewallsListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(client.FirewallsListCall)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFirewallsServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallsService)(nil).List), arg0)
}

// Patch mocks base method.
func (m *MockFirewallsService) Patch(arg0, arg1 string, arg2 *v1.Firewall) client.FirewallsPatchCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.FirewallsPatchCall)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockFirewallsServiceMockRecorder) Patch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockFirewallsService)(nil).Patch), arg0, arg1, arg2)
}

// MockRoutesService is a mock of RoutesService interface.
type MockRoutesService struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesServiceMockRecorder
}

// MockRoutesServiceMockRecorder is the mock recorder for MockRoutesService.
type MockRoutesServiceMockRecorder struct {
	mock *MockRoutesService
}

// NewMockRoutesService creates a new mock instance.
func NewMockRoutesService(ctrl *gomock.Controller) *MockRoutesService {
	mock := &MockRoutesService{ctrl: ctrl}
	mock.recorder = &MockRoutesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutesService) EXPECT() *MockRoutesServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoutesService) Delete(arg0, arg1 string) client.RoutesDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(client.RoutesDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoutesServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoutesService)(nil).Delete), arg0, arg1)
}

// List mocks base method.
func (m *MockRoutesService) List(arg0 string) client.RoutesListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(client.RoutesListCall)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRoutesServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoutesService)(nil).List), arg0)
}

// MockInstancesService is a mock of InstancesService interface.
type MockInstancesService struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesServiceMockRecorder
}

// MockInstancesServiceMockRecorder is the mock recorder for MockInstancesService.
type MockInstancesServiceMockRecorder struct {
	mock *MockInstancesService
}

// NewMockInstancesService creates a new mock instance.
func NewMockInstancesService(ctrl *gomock.Controller) *MockInstancesService {
	mock := &MockInstancesService{ctrl: ctrl}
	mock.recorder = &MockInstancesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesService) EXPECT() *MockInstancesServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInstancesService) Delete(arg0, arg1, arg2 string) client.InstancesDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.InstancesDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstancesServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstancesService)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockInstancesService) Get(arg0, arg1, arg2 string) client.InstancesGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.InstancesGetCall)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockInstancesServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstancesService)(nil).Get), arg0, arg1, arg2)
}

// Insert mocks base method.
func (m *MockInstancesService) Insert(arg0, arg1 string, arg2 *v1.Instance) client.InstancesInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.InstancesInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockInstancesServiceMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInstancesService)(nil).Insert), arg0, arg1, arg2)
}

// MockDisksService is a mock of DisksService interface.
type MockDisksService struct {
	ctrl     *gomock.Controller
	recorder *MockDisksServiceMockRecorder
}

// MockDisksServiceMockRecorder is the mock recorder for MockDisksService.
type MockDisksServiceMockRecorder struct {
	mock *MockDisksService
}

// NewMockDisksService creates a new mock instance.
func NewMockDisksService(ctrl *gomock.Controller) *MockDisksService {
	mock := &MockDisksService{ctrl: ctrl}
	mock.recorder = &MockDisksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksService) EXPECT() *MockDisksServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDisksService) Delete(arg0, arg1, arg2 string) client.DisksDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.DisksDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDisksServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDisksService)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockDisksService) Get(arg0, arg1, arg2 string) client.DisksGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.DisksGetCall)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDisksServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDisksService)(nil).Get), arg0, arg1, arg2)
}

// Insert mocks base method.
func (m *MockDisksService) Insert(arg0, arg1 string, arg2 *v1.Disk) client.DisksInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.DisksInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDisksServiceMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDisksService)(nil).Insert), arg0, arg1, arg2)
}

// MockRegionsService is a mock of RegionsService interface.
type MockRegionsService struct {
	ctrl     *gomock.Controller
	recorder *MockRegionsServiceMockRecorder
}

// MockRegionsServiceMockRecorder is the mock recorder for MockRegionsService.
type MockRegionsServiceMockRecorder struct {
	mock *MockRegionsService
}

// NewMockRegionsService creates a new mock instance.
func NewMockRegionsService(ctrl *gomock.Controller) *MockRegionsService {
	mock := &MockRegionsService{ctrl: ctrl}
	mock.recorder = &MockRegionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionsService) EXPECT() *MockRegionsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRegionsService) Get(arg0, arg1 string) client.RegionsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(client.RegionsGetCall)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRegionsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegionsService)(nil).Get), arg0, arg1)
}

// MockFirewallsListCall is a mock of FirewallsListCall interface.
type MockFirewallsListCall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsListCallMockRecorder
}

// MockFirewallsListCallMockRecorder is the mock recorder for MockFirewallsListCall.
type MockFirewallsListCallMockRecorder struct {
	mock *MockFirewallsListCall
}

// NewMockFirewallsListCall creates a new mock instance.
func NewMockFirewallsListCall(ctrl *gomock.Controller) *MockFirewallsListCall {
	mock := &MockFirewallsListCall{ctrl: ctrl}
	mock.recorder = &MockFirewallsListCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsListCall) EXPECT() *MockFirewallsListCallMockRecorder {
	return m.recorder
}

// Pages mocks base method.
func (m *MockFirewallsListCall) Pages(arg0 context.Context, arg1 func(*v1.FirewallList) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pages indicates an expected call of Pages.
func (mr *MockFirewallsListCallMockRecorder) Pages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pages", reflect.TypeOf((*MockFirewallsListCall)(nil).Pages), arg0, arg1)
}

// MockFirewallsGetCall is a mock of FirewallsGetCall interface.
type MockFirewallsGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsGetCallMockRecorder
}

// MockFirewallsGetCallMockRecorder is the mock recorder for MockFirewallsGetCall.
type MockFirewallsGetCallMockRecorder struct {
	mock *MockFirewallsGetCall
}

// NewMockFirewallsGetCall creates a new mock instance.
func NewMockFirewallsGetCall(ctrl *gomock.Controller) *MockFirewallsGetCall {
	mock := &MockFirewallsGetCall{ctrl: ctrl}
	mock.recorder = &MockFirewallsGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsGetCall) EXPECT() *MockFirewallsGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFirewallsGetCall) Context(arg0 context.Context) client.FirewallsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.FirewallsGetCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFirewallsGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFirewallsGetCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockFirewallsGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Firewall, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockFirewallsGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockFirewallsGetCall)(nil).Do), arg0...)
}

// MockFirewallsInsertCall is a mock of FirewallsInsertCall interface.
type MockFirewallsInsertCall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsInsertCallMockRecorder
}

// MockFirewallsInsertCallMockRecorder is the mock recorder for MockFirewallsInsertCall.
type MockFirewallsInsertCallMockRecorder struct {
	mock *MockFirewallsInsertCall
}

// NewMockFirewallsInsertCall creates a new mock instance.
func NewMockFirewallsInsertCall(ctrl *gomock.Controller) *MockFirewallsInsertCall {
	mock := &MockFirewallsInsertCall{ctrl: ctrl}
	mock.recorder = &MockFirewallsInsertCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsInsertCall) EXPECT() *MockFirewallsInsertCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFirewallsInsertCall) Context(arg0 context.Context) client.FirewallsInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.FirewallsInsertCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFirewallsInsertCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFirewallsInsertCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockFirewallsInsertCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockFirewallsInsertCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockFirewallsInsertCall)(nil).Do), arg0...)
}

// MockFirewallsPatchCall is a mock of FirewallsPatchCall interface.
type MockFirewallsPatchCall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsPatchCallMockRecorder
}

// MockFirewallsPatchCallMockRecorder is the mock recorder for MockFirewallsPatchCall.
type MockFirewallsPatchCallMockRecorder struct {
	mock *MockFirewallsPatchCall
}

// NewMockFirewallsPatchCall creates a new mock instance.
func NewMockFirewallsPatchCall(ctrl *gomock.Controller) *MockFirewallsPatchCall {
	mock := &MockFirewallsPatchCall{ctrl: ctrl}
	mock.recorder = &MockFirewallsPatchCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsPatchCall) EXPECT() *MockFirewallsPatchCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFirewallsPatchCall) Context(arg0 context.Context) client.FirewallsPatchCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.FirewallsPatchCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFirewallsPatchCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFirewallsPatchCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockFirewallsPatchCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockFirewallsPatchCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockFirewallsPatchCall)(nil).Do), arg0...)
}

// MockFirewallsDeleteCall is a mock of FirewallsDeleteCall interface.
type MockFirewallsDeleteCall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsDeleteCallMockRecorder
}

// MockFirewallsDeleteCallMockRecorder is the mock recorder for MockFirewallsDeleteCall.
type MockFirewallsDeleteCallMockRecorder struct {
	mock *MockFirewallsDeleteCall
}

// NewMockFirewallsDeleteCall creates a new mock instance.
func NewMockFirewallsDeleteCall(ctrl *gomock.Controller) *MockFirewallsDeleteCall {
	mock := &MockFirewallsDeleteCall{ctrl: ctrl}
	mock.recorder = &MockFirewallsDeleteCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsDeleteCall) EXPECT() *MockFirewallsDeleteCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFirewallsDeleteCall) Context(arg0 context.Context) client.FirewallsDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.FirewallsDeleteCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFirewallsDeleteCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFirewallsDeleteCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockFirewallsDeleteCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockFirewallsDeleteCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockFirewallsDeleteCall)(nil).Do), arg0...)
}

// MockRoutesDeleteCall is a mock of RoutesDeleteCall interface.
type MockRoutesDeleteCall struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesDeleteCallMockRecorder
}

// MockRoutesDeleteCallMockRecorder is the mock recorder for MockRoutesDeleteCall.
type MockRoutesDeleteCallMockRecorder struct {
	mock *MockRoutesDeleteCall
}

// NewMockRoutesDeleteCall creates a new mock instance.
func NewMockRoutesDeleteCall(ctrl *gomock.Controller) *MockRoutesDeleteCall {
	mock := &MockRoutesDeleteCall{ctrl: ctrl}
	mock.recorder = &MockRoutesDeleteCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutesDeleteCall) EXPECT() *MockRoutesDeleteCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRoutesDeleteCall) Context(arg0 context.Context) client.RoutesDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.RoutesDeleteCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRoutesDeleteCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRoutesDeleteCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockRoutesDeleteCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRoutesDeleteCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRoutesDeleteCall)(nil).Do), arg0...)
}

// MockRoutesListCall is a mock of RoutesListCall interface.
type MockRoutesListCall struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesListCallMockRecorder
}

// MockRoutesListCallMockRecorder is the mock recorder for MockRoutesListCall.
type MockRoutesListCallMockRecorder struct {
	mock *MockRoutesListCall
}

// NewMockRoutesListCall creates a new mock instance.
func NewMockRoutesListCall(ctrl *gomock.Controller) *MockRoutesListCall {
	mock := &MockRoutesListCall{ctrl: ctrl}
	mock.recorder = &MockRoutesListCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutesListCall) EXPECT() *MockRoutesListCallMockRecorder {
	return m.recorder
}

// Pages mocks base method.
func (m *MockRoutesListCall) Pages(arg0 context.Context, arg1 func(*v1.RouteList) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pages indicates an expected call of Pages.
func (mr *MockRoutesListCallMockRecorder) Pages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pages", reflect.TypeOf((*MockRoutesListCall)(nil).Pages), arg0, arg1)
}

// MockInstancesGetCall is a mock of InstancesGetCall interface.
type MockInstancesGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesGetCallMockRecorder
}

// MockInstancesGetCallMockRecorder is the mock recorder for MockInstancesGetCall.
type MockInstancesGetCallMockRecorder struct {
	mock *MockInstancesGetCall
}

// NewMockInstancesGetCall creates a new mock instance.
func NewMockInstancesGetCall(ctrl *gomock.Controller) *MockInstancesGetCall {
	mock := &MockInstancesGetCall{ctrl: ctrl}
	mock.recorder = &MockInstancesGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesGetCall) EXPECT() *MockInstancesGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstancesGetCall) Context(arg0 context.Context) client.InstancesGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.InstancesGetCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancesGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancesGetCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockInstancesGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockInstancesGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInstancesGetCall)(nil).Do), arg0...)
}

// MockInstancesDeleteCall is a mock of InstancesDeleteCall interface.
type MockInstancesDeleteCall struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesDeleteCallMockRecorder
}

// MockInstancesDeleteCallMockRecorder is the mock recorder for MockInstancesDeleteCall.
type MockInstancesDeleteCallMockRecorder struct {
	mock *MockInstancesDeleteCall
}

// NewMockInstancesDeleteCall creates a new mock instance.
func NewMockInstancesDeleteCall(ctrl *gomock.Controller) *MockInstancesDeleteCall {
	mock := &MockInstancesDeleteCall{ctrl: ctrl}
	mock.recorder = &MockInstancesDeleteCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesDeleteCall) EXPECT() *MockInstancesDeleteCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstancesDeleteCall) Context(arg0 context.Context) client.InstancesDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.InstancesDeleteCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancesDeleteCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancesDeleteCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockInstancesDeleteCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockInstancesDeleteCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInstancesDeleteCall)(nil).Do), arg0...)
}

// MockInstancesInsertCall is a mock of InstancesInsertCall interface.
type MockInstancesInsertCall struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesInsertCallMockRecorder
}

// MockInstancesInsertCallMockRecorder is the mock recorder for MockInstancesInsertCall.
type MockInstancesInsertCallMockRecorder struct {
	mock *MockInstancesInsertCall
}

// NewMockInstancesInsertCall creates a new mock instance.
func NewMockInstancesInsertCall(ctrl *gomock.Controller) *MockInstancesInsertCall {
	mock := &MockInstancesInsertCall{ctrl: ctrl}
	mock.recorder = &MockInstancesInsertCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesInsertCall) EXPECT() *MockInstancesInsertCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstancesInsertCall) Context(arg0 context.Context) client.InstancesInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.InstancesInsertCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancesInsertCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancesInsertCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockInstancesInsertCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockInstancesInsertCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInstancesInsertCall)(nil).Do), arg0...)
}

// MockDisksInsertCall is a mock of DisksInsertCall interface.
type MockDisksInsertCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksInsertCallMockRecorder
}

// MockDisksInsertCallMockRecorder is the mock recorder for MockDisksInsertCall.
type MockDisksInsertCallMockRecorder struct {
	mock *MockDisksInsertCall
}

// NewMockDisksInsertCall creates a new mock instance.
func NewMockDisksInsertCall(ctrl *gomock.Controller) *MockDisksInsertCall {
	mock := &MockDisksInsertCall{ctrl: ctrl}
	mock.recorder = &MockDisksInsertCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksInsertCall) EXPECT() *MockDisksInsertCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDisksInsertCall) Context(arg0 context.Context) client.DisksInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.DisksInsertCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDisksInsertCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksInsertCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockDisksInsertCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDisksInsertCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksInsertCall)(nil).Do), arg0...)
}

// MockDisksGetCall is a mock of DisksGetCall interface.
type MockDisksGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksGetCallMockRecorder
}

// MockDisksGetCallMockRecorder is the mock recorder for MockDisksGetCall.
type MockDisksGetCallMockRecorder struct {
	mock *MockDisksGetCall
}

// NewMockDisksGetCall creates a new mock instance.
func NewMockDisksGetCall(ctrl *gomock.Controller) *MockDisksGetCall {
	mock := &MockDisksGetCall{ctrl: ctrl}
	mock.recorder = &MockDisksGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksGetCall) EXPECT() *MockDisksGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDisksGetCall) Context(arg0 context.Context) client.DisksGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.DisksGetCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDisksGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksGetCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockDisksGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDisksGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksGetCall)(nil).Do), arg0...)
}

// MockDisksDeleteCall is a mock of DisksDeleteCall interface.
type MockDisksDeleteCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksDeleteCallMockRecorder
}

// MockDisksDeleteCallMockRecorder is the mock recorder for MockDisksDeleteCall.
type MockDisksDeleteCallMockRecorder struct {
	mock *MockDisksDeleteCall
}

// NewMockDisksDeleteCall creates a new mock instance.
func NewMockDisksDeleteCall(ctrl *gomock.Controller) *MockDisksDeleteCall {
	mock := &MockDisksDeleteCall{ctrl: ctrl}
	mock.recorder = &MockDisksDeleteCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksDeleteCall) EXPECT() *MockDisksDeleteCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDisksDeleteCall) Context(arg0 context.Context) client.DisksDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.DisksDeleteCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDisksDeleteCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksDeleteCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockDisksDeleteCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDisksDeleteCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksDeleteCall)(nil).Do), arg0...)
}

// MockRegionsGetCall is a mock of RegionsGetCall interface.
type MockRegionsGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockRegionsGetCallMockRecorder
}

// MockRegionsGetCallMockRecorder is the mock recorder for MockRegionsGetCall.
type MockRegionsGetCallMockRecorder struct {
	mock *MockRegionsGetCall
}

// NewMockRegionsGetCall creates a new mock instance.
func NewMockRegionsGetCall(ctrl *gomock.Controller) *MockRegionsGetCall {
	mock := &MockRegionsGetCall{ctrl: ctrl}
	mock.recorder = &MockRegionsGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionsGetCall) EXPECT() *MockRegionsGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRegionsGetCall) Context(arg0 context.Context) client.RegionsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(client.RegionsGetCall)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRegionsGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRegionsGetCall)(nil).Context), arg0)
}

// Do mocks base method.
func (m *MockRegionsGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Region, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRegionsGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRegionsGetCall)(nil).Do), arg0...)
}
